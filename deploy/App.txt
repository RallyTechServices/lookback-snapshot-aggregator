<!DOCTYPE html>
<html>
<head>
    <title>Lookback Snapshot Aggregator</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Thu Dec 17 2015 12:34:48 GMT-0600 (CST) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Thu Dec 17 2015 12:34:48 GMT-0600 (CST)";
        var CHECKSUM = 8736786082;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Rally.ui.dialog.Dialog',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
    title: "Build Information",
    
    defaults: { padding: 5, margin: 5 },

    closable: true,
     
    draggable: true,

    autoShow: true,
   
    width: 350, 
    
    initComponent: function() {
        var id = Ext.id(this);
        this.title =  "<span class='icon-help'> </span>" + this.title;
        this.callParent(arguments);
    },
    
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    
    _checkChecksum: function(container) {
        var deferred = Ext.create('Deft.Deferred');
        console.log("_checkChecksum", container);
        var me = this;
        
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        deferred.resolve(false);
                        return;
                    }
                }
                deferred.resolve(true);
            }
        });
        
        return deferred.promise;
    },
    
    afterRender: function() {
        var app = Rally.getApp();
        
        if (! app.isExternal() ) {
                
            this._checkChecksum(app).then({
                scope: this,
                success: function(result){
                    if ( !result ) {
                        this.addDocked({
                            xtype:'container',
                            cls: 'build-info',
                            padding: 2,
                            html:'<span class="icon-warning"> </span>Checksums do not match'
                        });
                    }
                },
                failure: function(msg){
                    console.log("oops:",msg);
                }
            });
        } else {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'... Running externally'
            });
        }
        this.callParent(arguments);
    },
    
    beforeRender: function() {
        var me = this;
        this.callParent(arguments);

        if (this.informationHtml) {
            this.addDocked({
                xtype: 'component',
                componentCls: 'intro-panel',
                padding: 2,
                html: this.informationHtml
            });
        }
        
        this.addDocked({
            xtype:'container',
            cls: 'build-info',
            padding: 2,
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            this.addDocked({
                xtype:'container',
                cls: 'build-info',
                padding: 2,
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.AggregateStoreFactory',{
    extend: 'Rally.data.lookback.SnapshotStore',

    logger: new Rally.technicalservices.Logger(),
    snapshots: null,

    startDate: null,
    endDate: null,
    aggregateBy: null,

    constructor: function(config){

        this.startDate = config.startDate;
        this.endDate = config.endDate;
        this.aggregateBy = config.aggregateBy || null;

        config.sort = { _ValidFrom: 1 };  //The aggregator class needs snapshots to be sorted ascending in order.
        this.callParent([config]);

        this.on('load', this._aggregateSnapshots, this);
    },

    _aggregateSnapshots: function(store, snapshots, success){
        this.snapshots = snapshots;

        this.logger.log('_aggregateSnapshots',this.aggregateBy, this.fetch, snapshots, success);
        if (success){
            var aggregator = Ext.create('Rally.technicalservices.SnapshotAggregator',{
                snapshots: this.snapshots,
                aggregateBy: this.aggregateBy,
                fields: this.fetch,
                startDate: this.startDate,
                endDate: this.endDate
            });

            this.fireEvent('storeready', aggregator.getData(), aggregator.getStoreFields());
        } else {
            this.fireEvent('error', "Error loading snapshots.");
        }
    }
});

Ext.define('Rally.technicalservices.SnapshotAggregator',{

    data: undefined,
    aggregateField: "AggregateDate",
    snapAggregateField: "_ValidFrom",

    constructor: function(config){
            var snapshots = config.snapshots || [],
                aggregateBy = config.aggregateBy || null,
                fields = config.fields || ['FormattedID'],
                startDate = config.startDate,
                endDate = config.endDate;

        this.fields = fields;
        this.data = this._aggregate(snapshots, aggregateBy, fields, startDate, endDate);
        console.log('data',this.data);
    },
    getData: function(){
        return this.data;
    },
    getStoreFields: function(){
        var fields = [this.aggregateField];
        fields = fields.concat(this.fields);
        console.log('fields', fields)
        return fields;
    },
    _aggregate: function(snapshots, aggregateBy, fields, startDate, endDate){
        console.log('_aggregate',aggregateBy, fields, startDate, endDate);
        if (!aggregateBy){
            return this._rawData(snapshots, fields);
        }

        if (aggregateBy === 'day'){
            return this._aggregateByDay(snapshots, fields,startDate, endDate);
        }

        return [];
    },
    _rawData: function(snapshots, fields){
        var data = [],
            aggregateField = this.aggregateField;

        _.each(snapshots, function(s){
            var r = this._getSnapRow(s.getData(),fields)
            r[aggregateField] = Rally.util.DateTime.fromIsoString(s.get("_ValidFrom"));
            data.push(r);
        }, this);
        return data;
    },
    _getSnapRow: function(snapData, fields){
        var r = {};
        _.each(fields, function(f){
            r[f] = snapData[f] || '';
        });
        return r;
    },
    _aggregateByDay: function(snapshots, fields, startDate, endDate){
        var newDateField = "date_changed",
            snapsByOid = this._aggregateSnapsByOid(snapshots, newDateField),
            dateBuckets = this._getDateBuckets(startDate, endDate, 'day'),
            aggregateField = this.aggregateField,
            data = [];

        console.log('dateBuckets',dateBuckets);

        _.each(dateBuckets, function(day){
            _.each(snapsByOid, function(snaps){
                var objectDayRow = {};
                _.each(snaps, function(snap){
                    if (snap[newDateField] < day){
                        objectDayRow = this._getSnapRow(snap,fields);
                        objectDayRow[aggregateField] = day;
                    }
                }, this);
                data.push(objectDayRow);
            }, this);
        }, this);
        return data;
    },
    _aggregateSnapsByOid: function(snaps, newDateField) {
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function (snap) {
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined) {
                snaps_by_oid[oid] = [];
            }
            var data = snap.getData();
            data[newDateField] = Rally.util.DateTime.fromIsoString(snap.get('_ValidFrom'));
            snaps_by_oid[oid].push(data);
        });
        return snaps_by_oid;
    },

    _getDateBuckets: function(startDate, endDate, granularity){
        //Todo: once we start adding more granularity, this will need to be updated to get a different bucket start date
        var bucketStartDate = startDate;
        var bucketEndDate = Rally.util.DateTime.add(endDate, granularity, 1);

        var date = bucketStartDate;

        var buckets = [];
        while (date<bucketEndDate && bucketStartDate < bucketEndDate){
            buckets.push(date);
            date = Rally.util.DateTime.add(date,granularity,1);
        }
        return buckets;
    },
    //formatDateBuckets: function(buckets, dateFormat){
    //    var categories = [];
    //    Ext.each(buckets, function(bucket){
    //        categories.push(Rally.util.DateTime.format(bucket,dateFormat));
    //    });
    //    categories[categories.length-1] += "*";
    //    return categories;
    //}


});

Ext.define("Rally.technicalServices.LookbackSnapshotAggregator", {
    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),
    defaults: { margin: 10 },

    items: [
        {xtype:'container',itemId:'selector_box',layout: {type: 'hbox'}},
        {xtype:'container',itemId:'display_box'}
    ],

    config: {
        defaultSettings: {
            aggregateBy: 'day',
            artifactType: 'hierarchicalrequirement',
            maxDayRange: 30,
            defaultDayRange: 7
        }
    },

    launch: function() {
        this._addDateSelectors();
    },
    fetchSnapshots: function(){
        var startDate = this.getStartDate(),
            endDate = this.getEndDate();
        //Validate
        this.down('#display_box').removeAll();
        if (!this._validateDateRange(startDate, endDate)){
            return;
        }

        this.logger.log('fetchSnapshots', startDate, endDate, this.getArtifactType());
        this.setLoading(true);
        var asf = Ext.create('Rally.technicalservices.AggregateStoreFactory',{
            find: {
                _ProjectHierarchy: {$in: [this.getContext().getProject().ObjectID]},
                _TypeHierarchy: {$in: [this.getArtifactType()]},
                _ValidFrom: {$lte: Rally.util.DateTime.toIsoString(endDate)},
                _ValidTo: {$gt: Rally.util.DateTime.toIsoString(startDate)}
            },
            fetch: this.getFetchFields(),
            hydrate: this.getHydrateFields(),
            limit: 'Infinity',
            startDate: startDate,
            endDate: endDate,
            aggregateBy: this.getAggregateBy(),
            sort: {
                _ValidFrom: 1
            }
        });

        asf.load();
        asf.on('storeready',this._addGrid, this);
        asf.on('error',this._showErrorMessage, this);
    },
    _validateDateRange: function(startDate, endDate){
        if (!startDate || !endDate){
            this.down('#display_box').add({
                xtype: 'container',
                html: 'Please Select a valid Start Date and End Date'
            });
            return false;
        }

        var delta =Rally.util.DateTime.getDifference(endDate,startDate,  'day');
        this.logger.log('_validateDateRange', startDate, endDate, delta);
        if (delta < 0){
            this.down('#display_box').add({
                xtype: 'container',
                html: 'Please Select a Start Date that falls before the End Date'
            });
            return false;
        }
        if (delta > this.getMaxDayRange()){
            this.down('#display_box').add({
                xtype: 'container',
                html: 'Date range too large.  Please Select a date range of ' + this.getMaxDayRange() + " days or less."
            });
            return false;
        }
        return true;
    },
    _showErrorMessage: function(msg){
        this.logger.log('_showError', msg);
        this.setLoading(false);
        Rally.ui.notify.Notifier.showError({message: msg});
    },
    _addGrid: function(data, fields){
        this.logger.log('_addGrid', data, fields);
        this.setLoading(false);
        if (this.down('rallygrid')){
            this.down('rallygrid').destroy();  
        }

        var store = Ext.create('Rally.data.custom.Store', {
            data: data,
            fields: fields
        });

        this.down('#display_box').add({
            xtype: 'rallygrid',
            store: store,
            columnCfgs: this._getColumns(fields)
        });
    },
    _getColumns: function(fields){
        return _.map(fields, function(f){ return {text: f, dataIndex: f, flex: 1 }; });
    },
    getFetchFields: function(){
        return Rally.technicalServices.LookbackSnapshotAggregatorSettings.configurationMap[this.getArtifactType()].fetch;
    },
    getHydrateFields: function(){
        return Rally.technicalServices.LookbackSnapshotAggregatorSettings.configurationMap[this.getArtifactType()].hydrate;
    },
    getArtifactType: function(){
        return this.getSetting('artifactType');
    },
    getAggregateBy: function(){
        return this.getSetting('aggregateBy');
    },
    getMaxDayRange: function(){
        return this.getSetting('maxDayRange');
    },
    getDefaultDayRange: function(){
        return this.getSetting('defaultDayRange');
    },
    _addDateSelectors: function(){
        var today = new Date();

        this.getSelectorBox().add(this.getDateSelectorConfig('dt-startDate','Start Date',Rally.util.DateTime.add(today,"day",-this.getDefaultDayRange())));
        this.getSelectorBox().add(this.getDateSelectorConfig('dt-endDate','End Date',today));
        var btn = this.getSelectorBox().add({
            xtype: 'rallybutton',
            text: 'Update'
        });
        btn.on('click', this.fetchSnapshots, this);
    },
    getDateSelectorConfig: function(itemId, label,defaultValue){
        return {
            xtype: 'rallydatefield',
            itemId: itemId,
            fieldLabel: label,
            labelAlign: 'right',
            value: defaultValue
        };
    },
    getSelectorBox: function(){
        return this.down('#selector_box');
    },
    getStartDate: function(){
        return this.getSelectorBox().down('#dt-startDate').getValue();
    },
    getEndDate: function(){
        return this.getSelectorBox().down('#dt-endDate').getValue();
    },
    getSettingsFields: function(){
        return Rally.technicalServices.LookbackSnapshotAggregatorSettings.getFields();
    },
    getOptions: function() {
        return [
            {
                text: 'About...',
                handler: this._launchInfo,
                scope: this
            }
        ];
    },
    _launchInfo: function() {
        if ( this.about_dialog ) { this.about_dialog.destroy(); }
        this.about_dialog = Ext.create('Rally.technicalservices.InfoLink',{});
    },
    isExternal: function(){
        return typeof(this.getAppId()) == 'undefined';
    },
    
    //onSettingsUpdate:  Override
    onSettingsUpdate: function (settings){
        this.logger.log('onSettingsUpdate',settings);
        Ext.apply(this, settings);
        this.launch();
    }
});

Ext.define('Rally.technicalServices.LookbackSnapshotAggregatorSettings',{
    singleton: true,

    /**
     * Hardcoded types and fields for the configuration options
     */
    configurationMap: {
        hierarchicalrequirement: {
            name: 'hierarchicalRequirement',
            displayName: 'User Story',
            fetch: ['ObjectID','FormattedID','Name','PlanEstimate','ScheduleState','Project','Parent','PortfolioItem'],
            hydrate: ['ScheduleState','Project'],
            manualHydrate: []
        },
        "portfolioitem/feature": {
            name: 'portfolioitem/feature',
            displayName: 'Feature',
            fetch: ['ObjectID','FormattedID','Name','State','Project','Parent'],
            hydrate: ['State','Project'],
            manualHydrate: []
        },
        //Date    Initiative ID    Initiative Name    Team    Team ID    Cap / Exp Field    Investment Category    Initiative Size    State
        "portfolioitem/initiative": {
            name: 'portfolioitem/initiative',
            displayName: 'Initiative',
            fetch: ['ObjectID','FormattedID','Name','Project','Project','Investment Category','State','Parent','PreliminaryEstimate'],
            hydrate: ['State','Project'],
            manualHydrate: []
        }
    },

    aggregateByOptions: [{
        name: 'Day',
        value: 'day'
    },{
        name: 'None',
        value: 'none'
    }],

    getFields: function(){
        var configurationData = _.values(this.configurationMap),
            width = 100;

        return [{
            xtype: 'rallycombobox',
            name: 'aggregateBy',
            store: Ext.create('Ext.data.Store',{data: this.aggregateByOptions, fields: ['name','value']}),
            displayField: 'name',
            valueField: 'value',
            labelAlign: 'right',
            labelWidth: width,
            fieldLabel: "Aggregate By"
        },{
            xtype: 'rallycombobox',
            name: 'artifactType',
            store: Ext.create('Ext.data.Store', {data: configurationData, fields: ['name','displayName']}),
            fieldLabel: "Artifact Type",
            labelAlign: 'right',
            labelWidth: width,
            displayField: 'displayName',
            valueField: 'name'
        }];
    }
});

            
               Rally.launchApp('Rally.technicalServices.LookbackSnapshotAggregator', {
                   name: 'Lookback Snapshot Aggregator'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}
    </style>

</head>
<body></body>
</html>